{
  "version": 3,
  "sources": ["../../../../app/routes/__auth/register.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs, V2_MetaFunction } from \"@remix-run/node\";\r\nimport { prisma } from \"~/db.server\";\r\nimport {\r\n  NodeOnDiskFile,\r\n  json,\r\n  redirect,\r\n  unstable_composeUploadHandlers,\r\n  unstable_createFileUploadHandler,\r\n  unstable_createMemoryUploadHandler,\r\n  unstable_parseMultipartFormData,\r\n} from \"@remix-run/node\";\r\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\r\nimport * as React from \"react\";\r\n\r\nimport { getUserId, createUserSession } from \"~/session.server\";\r\n\r\nimport { createUser, getUserByEmail } from \"~/models/user.server\";\r\nimport { safeRedirect, validateEmail } from \"~/utils\";\r\nimport path from \"path\";\r\n\r\nexport async function loader({ request }: LoaderArgs) {\r\n  const userId = await getUserId(request);\r\n  if (userId) return redirect(\"/\");\r\n  return json({});\r\n}\r\n\r\nexport async function action({ request }: ActionArgs) {\r\n  const formData = await request.formData();\r\n  //   const uploadHandler = unstable_composeUploadHandlers(\r\n  //     unstable_createFileUploadHandler({\r\n  //       maxPartSize: 5_000_000,\r\n  //       file: ({ filename }) => \"upload-\" + Date.now() + path.extname(filename),\r\n  //       directory: \"public/images\",\r\n  //     }),\r\n  //     // parse everything else into memory\r\n  //     unstable_createMemoryUploadHandler()\r\n  //   );\r\n  //   const formData = await unstable_parseMultipartFormData(\r\n  //     request,\r\n  //     uploadHandler\r\n  //   );\r\n  const email = formData.get(\"email\");\r\n  const password = formData.get(\"password\");\r\n  const username = formData.get(\"username\");\r\n  const fullname = formData.get(\"fullname\");\r\n  //   // const pic = formData.get(\"profilepic\");\r\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\r\n\r\n  if (!validateEmail(email)) {\r\n    return json(\r\n      {\r\n        errors: {\r\n          email: \"Email is invalid\",\r\n          password: null,\r\n          username: null,\r\n          fullname: null,\r\n        },\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  if (validateEmail(email)) {\r\n    const userExist = await getUserByEmail(email);\r\n    if (userExist) {\r\n      return json(\r\n        {\r\n          errors: {\r\n            email: \"Email is allready registered\",\r\n            password: null,\r\n            username: null,\r\n            fullname: null,\r\n          },\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n  }\r\n\r\n  if (typeof username !== \"string\" || username.length === 0) {\r\n    return json(\r\n      {\r\n        errors: {\r\n          email: null,\r\n          password: null,\r\n          username: \"username is required\",\r\n          fullname: null,\r\n        },\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  if (typeof fullname !== \"string\" || fullname.length === 0) {\r\n    return json(\r\n      {\r\n        errors: {\r\n          email: null,\r\n          password: null,\r\n          username: null,\r\n          fullname: \"Fullname is required\",\r\n        },\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  if (typeof password !== \"string\" || password.length === 0) {\r\n    return json(\r\n      {\r\n        errors: {\r\n          email: null,\r\n          password: \"Password is required\",\r\n          username: null,\r\n          fullname: null,\r\n        },\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  if (password.length < 8) {\r\n    return json(\r\n      {\r\n        errors: {\r\n          email: null,\r\n          password: \"Password is too short\",\r\n          username: null,\r\n          fullname: null,\r\n        },\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const existingUser = await getUserByEmail(email);\r\n  if (existingUser) {\r\n    return json(\r\n      {\r\n        errors: {\r\n          email: \"A user already exists with this email\",\r\n          password: null,\r\n          username: null,\r\n          fullname: null,\r\n        },\r\n      },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  //   const avatarUrl = formData.get(\"profilepic\");\r\n  const image = \"\";\r\n\r\n  //   console.log(avatarUrl, \"upload-\" + Date.now() + \".jpeg\");\r\n\r\n  const user = await createUser(email, password, username, fullname, image);\r\n\r\n  return createUserSession({\r\n    request,\r\n    userId: user.id,\r\n    remember: false,\r\n    redirectTo,\r\n  });\r\n\r\n  // prisma.user.create({\r\n  //   data: {\r\n  //     email: \"email\",\r\n  //     username: \"username\",\r\n  //     fullname: \"fullname\",\r\n  //     image: \"\",\r\n  //     password: {\r\n  //       create: {\r\n  //         hash: \"abcd\",\r\n  //       },\r\n  //     },\r\n  //   },\r\n  // });\r\n}\r\n\r\nconst register = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const redirectTo = searchParams.get(\"redirectTo\") ?? undefined;\r\n  const actionData = useActionData<typeof action>();\r\n  const emailRef = React.useRef<HTMLInputElement>(null);\r\n  const passwordRef = React.useRef<HTMLInputElement>(null);\r\n  const usernameRef = React.useRef<HTMLInputElement>(null);\r\n  const fullnameRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (actionData?.errors?.email) {\r\n      emailRef.current?.focus();\r\n    } else if (actionData?.errors?.password) {\r\n      passwordRef.current?.focus();\r\n    } else if (actionData?.errors?.username) {\r\n      usernameRef.current?.focus();\r\n    } else if (actionData?.errors?.fullname) {\r\n      fullnameRef.current?.focus();\r\n    }\r\n  }, [actionData]);\r\n  return (\r\n    <>\r\n      <div className=\"flex justify-center items-center h-screen bg-indigo-600\">\r\n        <div className=\"w-[480px] p-6 shadow-purple-950 shadow-2xl bg-white rounded-md \">\r\n          <h1 className=\"text-3xl block text-center font-semibold\">\r\n            <i className=\"fa-solid fa-user\"></i> Register\r\n          </h1>\r\n          <hr className=\"mt-3\" />\r\n          <Form method=\"post\" encType=\"multipart/form-data\">\r\n            <div className=\"mt-3\">\r\n              <label htmlFor=\"email\" className=\"block text-base mb-2\">\r\n                Email\r\n              </label>\r\n              <input\r\n                className=\"border w-full text-base px-2 py-1 focus:outline-none focus:ring-0 focus:border-gray-600 rounded-sm\"\r\n                placeholder=\"Enter Email\"\r\n                ref={emailRef}\r\n                type=\"email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n              />\r\n\r\n              {actionData?.errors?.email && (\r\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\r\n                  {actionData.errors.email}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"mt-3\">\r\n              <label htmlFor=\"username\" className=\"block text-base mb-2\">\r\n                UserName\r\n              </label>\r\n              <input\r\n                className=\"border w-full text-base px-2 py-1 focus:outline-none focus:ring-0 focus:border-gray-600 rounded-sm\"\r\n                placeholder=\"Enter UserName\"\r\n                ref={usernameRef}\r\n                type=\"text\"\r\n                id=\"username\"\r\n                name=\"username\"\r\n              />\r\n\r\n              {actionData?.errors?.username && (\r\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\r\n                  {actionData.errors.username}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"mt-3\">\r\n              <label htmlFor=\"fullname\" className=\"block text-base mb-2\">\r\n                FullName\r\n              </label>\r\n              <input\r\n                className=\"border w-full text-base px-2 py-1 focus:outline-none focus:ring-0 focus:border-gray-600 rounded-sm\"\r\n                placeholder=\"Enter FullName\"\r\n                ref={fullnameRef}\r\n                type=\"text\"\r\n                id=\"fullname\"\r\n                name=\"fullname\"\r\n              />\r\n\r\n              {actionData?.errors?.fullname && (\r\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\r\n                  {actionData.errors.fullname}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"mt-3\">\r\n              <label htmlFor=\"password\" className=\"block text-base mb-2\">\r\n                Password\r\n              </label>\r\n              <input\r\n                className=\"border w-full text-base px-2 py-1 focus:outline-none focus:ring-0 focus:border-gray-600 rounded-sm\"\r\n                placeholder=\"Enter Password\"\r\n                ref={passwordRef}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n              />\r\n              {actionData?.errors?.password && (\r\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\r\n                  {actionData.errors.password}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"mt-3\">\r\n              <label htmlFor=\"profilepic\">Profile picture **</label>\r\n              <input\r\n                type=\"file\"\r\n                className=\"w-full text-base px-2 py-1 focus:outline-none focus:ring-0 focus:border-gray-600 rounded-sm block text-slate-500\r\n                file:mr-4 file:py-2 file:px-4\r\n                file:rounded-full file:border-0\r\n                file:text-sm file:font-semibold\r\n                file:bg-indigo-100 file:text-indigo-800\r\n                cursor-pointer file:cursor-pointer file:hover:bg-indigo-200 file:hover:text-indigo-900\"\r\n                placeholder=\"please choose profile picture\"\r\n                id=\"profilepic\"\r\n                name=\"profilepic\"\r\n              />\r\n            </div>\r\n            <div className=\"flex justify-between my-3 items-center\">\r\n              <div>\r\n                <input type=\"checkbox\" className=\"p-20\" />\r\n                <label>Remember Me?</label>\r\n              </div>\r\n              <div>\r\n                <a href=\"#\" className=\"text-indigo-800 font-semibold\">\r\n                  Forget Password?\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-5\">\r\n              <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\r\n              <button\r\n                type=\"submit\"\r\n                className=\"text-center bg-indigo-800 text-white w-full py-1 rounded-md border-2 border-indigo-700 hover:bg-white hover:text-indigo-800 font-semibold active:shadow-[inset_1px_5px_50px_-15px_rgba(1,1,1,0.5)]\"\r\n              >\r\n                Register\r\n              </button>\r\n            </div>\r\n            <div className=\"mt-5 flex justify-end font-semibold\">\r\n              <span>\r\n                I already have acount!{\" \"}\r\n                <Link to=\"/login\" className=\"text-blue-900\">\r\n                  Login\r\n                </Link>\r\n              </span>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default register;\r\n"],
  "mappings": "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",
  "names": ["_a", "_b", "_c", "_d", "_e"]
}
